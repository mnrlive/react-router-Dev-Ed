{"version":3,"sources":["Nav.js","Shop.js","About.js","ItemDetail.js","App.js","serviceWorker.js","index.js"],"names":["Nav","navStyle","color","className","style","to","Shop","useEffect","fetchItems","useState","items","setItems","a","fetch","data","json","console","log","map","item","key","id","name","About","ItemDetail","match","fetchItem","setItem","params","title","body","Home","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yPAyBeA,MApBf,WACE,IAAMC,EAAW,CACfC,MAAO,SAGT,OACE,6BACE,oCACA,wBAAIC,UAAU,aACZ,kBAAC,IAAD,CAAMC,MAAOH,EAAUI,GAAG,UACxB,sCAEF,kBAAC,IAAD,CAAMD,MAAOH,EAAUI,GAAG,SACxB,wC,gCCWKC,MAzBf,WACEC,qBAAU,WACRC,MACC,IAHW,MAKYC,mBAAS,IALrB,mBAKPC,EALO,KAKAC,EALA,KAORH,EAAU,uCAAG,8BAAAI,EAAA,sEACEC,MAAM,8CADR,cACXC,EADW,gBAEGA,EAAKC,OAFR,OAEXL,EAFW,OAGjBM,QAAQC,IAAIP,GACZC,EAASD,GAJQ,2CAAH,qDAOhB,OACE,6BACGA,EAAMQ,KAAI,SAAAC,GAAI,OACb,wBAAIC,IAAKD,EAAKE,IACZ,kBAAC,IAAD,CAAMhB,GAAE,gBAAWc,EAAKE,KAAOF,EAAKG,YCZ/BC,MARf,WACE,OACE,6BACE,4CCuBSC,MAzBf,YAAgC,IAAVC,EAAS,EAATA,MACpBlB,qBAAU,WACRmB,IACAV,QAAQC,IAAIQ,KACX,IAJ0B,MAMLhB,mBAAS,IANJ,mBAMtBU,EANsB,KAMhBQ,EANgB,KAQvBD,EAAS,uCAAG,8BAAAd,EAAA,sEACQC,MAAM,8CAAD,OACmBY,EAAMG,OAAOP,KAF7C,cACVK,EADU,gBAIGA,EAAUX,OAJb,OAIVI,EAJU,OAKhBQ,EAAQR,GACRH,QAAQC,IAAIE,GANI,2CAAH,qDASf,OACE,6BACE,4BAAKA,EAAKU,OACV,2BAAIV,EAAKW,QCGf,IAAMC,EAAO,kBACX,6BACE,2CAIWC,EAvBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8B,KAAK,IAAIC,OAAK,EAACC,UAAWJ,IACjC,kBAAC,IAAD,CAAOE,KAAK,SAASE,UAAWZ,IAChC,kBAAC,IAAD,CAAOU,KAAK,QAAQC,OAAK,EAACC,UAAW7B,IAHvC,gBAKE,kBAAC,IAAD,CAAO2B,KAAK,YAAYE,UAAWX,QCPzBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASd,MACvB,2DCZNe,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.778db012.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nfunction Nav() {\n  const navStyle = {\n    color: \"white\"\n  };\n\n  return (\n    <nav>\n      <h2>Logo</h2>\n      <ul className=\"nav-links\">\n        <Link style={navStyle} to=\"/about\">\n          <li>About</li>\n        </Link>\n        <Link style={navStyle} to=\"/shop\">\n          <li>Shop</li>\n        </Link>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./App.css\";\n\nfunction Shop() {\n  useEffect(() => {\n    fetchItems();\n  }, []);\n\n  const [items, setItems] = useState([]);\n\n  const fetchItems = async () => {\n    const data = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const items = await data.json();\n    console.log(items);\n    setItems(items);\n  };\n\n  return (\n    <div>\n      {items.map(item => (\n        <h1 key={item.id}>\n          <Link to={`/shop/${item.id}`}>{item.name}</Link>\n        </h1>\n      ))}\n    </div>\n  );\n}\n\nexport default Shop;\n","import React from \"react\";\n\nfunction About() {\n  return (\n    <div>\n      <h1>About Page</h1>\n    </div>\n  );\n}\n\nexport default About;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction ItemDetail({ match }) {\n  useEffect(() => {\n    fetchItem();\n    console.log(match);\n  }, []);\n\n  const [item, setItem] = useState([]);\n\n  const fetchItem = async () => {\n    const fetchItem = await fetch(\n      `https://jsonplaceholder.typicode.com/posts/${match.params.id}`\n    );\n    const item = await fetchItem.json();\n    setItem(item);\n    console.log(item);\n  };\n\n  return (\n    <div>\n      <h1>{item.title}</h1>\n      <p>{item.body}</p>\n    </div>\n  );\n}\n\nexport default ItemDetail;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport Nav from \"./Nav\";\nimport Shop from \"./Shop\";\nimport About from \"./About\";\nimport ItemDetail from \"./ItemDetail\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/shop\" exact component={Shop} />\n          fetchItems();\n          <Route path=\"/shop/:id\" component={ItemDetail} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nconst Home = () => (\n  <div>\n    <h1>Home Page</h1>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}